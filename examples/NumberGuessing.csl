
not(true) -> false
not(false) -> true

and(true, Bool) -> Bool
and(false, Bool) -> false

or(true, Bool) -> true
or(false, Bool) -> Bool

plus(zero, Y) -> Y
plus(succ(X), Y) -> succ(plus(X, Y))

equals(zero, zero) -> true
equals(zero, succ(Y)) -> false
equals(succ(X), zero) -> false
equals(succ(X), succ(Y)) -> equals(X, Y)


MARKING {
  number: succ(succ(succ(succ(succ(succ(zero))))))
  tries: succ(succ(succ(zero)))
  retry: true
}

TRANSITION ask {
  MATCH {
    retry: true
  }
  PRODUCE {
    waiting: @stdout(putStrLn, guess)
  }
}

TRANSITION guess {
  MATCH {
    waiting: unit
  }
  PRODUCE {
    guess: @stdin(readInt)
  }
}

TRANSITION check {
  MATCH {
    number: X
    guess: Y
  }
  PRODUCE {
    number: X
    guessed: equals(X, Y)
  }
}

TRANSITION repeat {
  MATCH {
    guessed: false
    tries: succ(X)
  }
  PRODUCE {
    tries: X
    retry: not(equals(zero, X))
  }
}

TRANSITION lose {
  MATCH {
    retry: false
  }
  PRODUCE {
    outcome: @stdout(putStrLn, lost)
  }
}

TRANSITION win {
  MATCH {
    guessed: true
  }
  PRODUCE {
    outcome: @stdout(putStrLn, won)
  }
}